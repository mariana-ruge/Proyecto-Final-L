(program (statement (function_stmt function sumar ( (param_list a , b) ) return (expr (expr a) + (expr b)))) (statement (assignment_stmt resultado = (expr (expr (expr 3) + (expr 5)) * (expr ( (expr (expr 2) - (expr 4)) ))))) (statement (arithmetic_stmt sqrt ( (expr 16) ))) (statement (arithmetic_stmt (trig_function sin) ( (expr 3.1416) ))) (statement (matrix_stmt matriz A = (matrix [ (row [ (expr 1) , (expr 2) ]) , (row [ (expr 3) , (expr 4) ]) ]))) (statement (matrix_stmt matriz B = (matrix [ (row [ (expr 5) , (expr 6) ]) , (row [ (expr 7) , (expr 8) ]) ]))) (statement (assignment_stmt C = (expr (expr A) + (expr B)))) (statement (matrix_stmt D = (matrix_operation transpose ( A )))) (statement (matrix_stmt E = (matrix_operation inverse ( A )))) (statement (conditional_stmt if (expr (expr resultado) (comparison_operator >) (expr 0)) then (statement (assignment_stmt resultado = (expr (expr resultado) * (expr 2)))) else (statement (assignment_stmt resultado = (expr (expr resultado) / (expr 2)))))) (statement (loop_stmt for i = (expr 1) to (expr 10) do (statement (assignment_stmt resultado = (expr (expr resultado) + (expr i)))) end)) (statement (loop_stmt while (expr (expr resultado) (comparison_operator <) (expr 100)) do (statement (assignment_stmt resultado = (expr (expr resultado) * (expr 1.5)))) end)) (statement (graph_stmt plot ( (expr 1) , (expr 2) ))) (statement (graph_stmt plot ( (expr resultado) , (expr (trig_function sin) ( (expr resultado) )) ))) (statement (file_stmt read ( "datos.txt" ))) (statement (file_stmt write ( "salida.txt" , (expr resultado) ))) (statement (function_stmt regression ( (expr 1) , (expr 2) ))) (statement (function_stmt classifier ( (expr 3) , (expr 4) ))) (statement (function_stmt clustering ( (expr 5) ))))